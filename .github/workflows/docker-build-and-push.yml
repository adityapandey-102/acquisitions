name: Docker Build and Push

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      tag_suffix:
        description: "Additional tag suffix (optional)"
        required: false
        default: ""

env:
  REGISTRY: docker.io
  IMAGE_NAME: acquisitions

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=prod-{{date 'YYYYMMDD-HHmmss'}},enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.description=Acquisitions application
            org.opencontainers.image.vendor=Acquisitions Team
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=${{ github.sha }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          target: production
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Generate Docker summary
        run: |
          echo "## 🐳 Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Status**: Docker image built and pushed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Image Details" >> $GITHUB_STEP_SUMMARY
          echo "🏷️ **Repository**: \`${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "🏗️ **Platforms**: \`linux/amd64\`, \`linux/arm64\`" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Target**: \`production\`" >> $GITHUB_STEP_SUMMARY
          echo "📅 **Built**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "📝 **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏷️ Published Tags" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Usage Examples" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pull the latest image:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Run the container:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker run -p 3000:3000 \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e NODE_ENV=production \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e DATABASE_URL=your_database_url \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e JWT_SECRET=your_jwt_secret \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Docker Compose example:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`yaml" >> $GITHUB_STEP_SUMMARY
          echo "services:" >> $GITHUB_STEP_SUMMARY
          echo "  app:" >> $GITHUB_STEP_SUMMARY
          echo "    image: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "    ports:" >> $GITHUB_STEP_SUMMARY
          echo "      - \"3000:3000\"" >> $GITHUB_STEP_SUMMARY
          echo "    environment:" >> $GITHUB_STEP_SUMMARY
          echo "      - NODE_ENV=production" >> $GITHUB_STEP_SUMMARY
          echo "      - DATABASE_URL=postgresql://user:pass@db:5432/acquisitions" >> $GITHUB_STEP_SUMMARY
          echo "      - JWT_SECRET=your_jwt_secret" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Clean up
        if: always()
        run: |
          # Clean up any temporary files or caches if needed
          echo "🧹 Cleaning up..."
          docker system prune -f --filter "until=24h" || true
          echo "✅ Cleanup completed"

      - name: Security scan with Trivy
        if: github.ref == 'refs/heads/main'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        if: github.ref == 'refs/heads/main'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

      - name: Notify on failure
        if: failure()
        run: |
          echo "::error::Docker build and push failed!"
          echo "::error::Please check the logs above for details."
          echo "::notice::Common issues:"
          echo "::notice::1. Check if DOCKER_USERNAME and DOCKER_PASSWORD secrets are set correctly"
          echo "::notice::2. Verify Dockerfile syntax and build context"
          echo "::notice::3. Ensure target platforms are supported"
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ❌ Build Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The Docker build and push process failed. Please check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Troubleshooting" >> $GITHUB_STEP_SUMMARY
          echo "1. **Secrets**: Ensure \`DOCKER_USERNAME\` and \`DOCKER_PASSWORD\` secrets are configured" >> $GITHUB_STEP_SUMMARY
          echo "2. **Dockerfile**: Check for syntax errors or missing dependencies" >> $GITHUB_STEP_SUMMARY
          echo "3. **Build Context**: Verify all required files are present in the repository" >> $GITHUB_STEP_SUMMARY
          echo "4. **Permissions**: Ensure Docker Hub repository exists and has write permissions" >> $GITHUB_STEP_SUMMARY
